/*
 * FusionAuth API
 *
 * This is a FusionAuth server. Find out more at [https://fusionauth.io](https://fusionauth.io). You need to [set up an API key](https://fusionauth.io/docs/v1/tech/apis/authentication#managing-api-keys) in the FusionAuth instance you are using to test out the API calls.
 *
 * The version of the OpenAPI document: 1.49.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IdentityProviderField {
    #[serde(rename = "apiMode", skip_serializing_if = "Option::is_none")]
    pub api_mode: Option<crate::models::SteamApiMode>,
    #[serde(rename = "buttonText", skip_serializing_if = "Option::is_none")]
    pub button_text: Option<String>,
    #[serde(rename = "client_id", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    #[serde(rename = "webAPIKey", skip_serializing_if = "Option::is_none")]
    pub web_api_key: Option<String>,
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "applicationConfiguration", skip_serializing_if = "Option::is_none")]
    pub application_configuration: Option<::std::collections::HashMap<String, crate::models::HyprApplicationConfiguration>>,
    #[serde(rename = "debug", skip_serializing_if = "Option::is_none")]
    pub debug: Option<bool>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
    #[serde(rename = "insertInstant", skip_serializing_if = "Option::is_none")]
    pub insert_instant: Option<i64>,
    #[serde(rename = "lambdaConfiguration", skip_serializing_if = "Option::is_none")]
    pub lambda_configuration: Option<Box<crate::models::ProviderLambdaConfiguration>>,
    /// The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
    #[serde(rename = "lastUpdateInstant", skip_serializing_if = "Option::is_none")]
    pub last_update_instant: Option<i64>,
    #[serde(rename = "linkingStrategy", skip_serializing_if = "Option::is_none")]
    pub linking_strategy: Option<crate::models::IdentityProviderLinkingStrategy>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "tenantConfiguration", skip_serializing_if = "Option::is_none")]
    pub tenant_configuration: Option<::std::collections::HashMap<String, crate::models::IdentityProviderTenantConfiguration>>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<crate::models::IdentityProviderType>,
    #[serde(rename = "client_secret", skip_serializing_if = "Option::is_none")]
    pub client_secret: Option<String>,
    #[serde(rename = "claimMap", skip_serializing_if = "Option::is_none")]
    pub claim_map: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "domains", skip_serializing_if = "Option::is_none")]
    pub domains: Option<Vec<serde_json::Value>>,
    #[serde(rename = "defaultKeyId", skip_serializing_if = "Option::is_none")]
    pub default_key_id: Option<uuid::Uuid>,
    #[serde(rename = "headerKeyParameter", skip_serializing_if = "Option::is_none")]
    pub header_key_parameter: Option<String>,
    #[serde(rename = "oauth2", skip_serializing_if = "Option::is_none")]
    pub oauth2: Option<Box<crate::models::IdentityProviderOauth2Configuration>>,
    #[serde(rename = "uniqueIdentityClaim", skip_serializing_if = "Option::is_none")]
    pub unique_identity_claim: Option<String>,
    #[serde(rename = "assertionConfiguration", skip_serializing_if = "Option::is_none")]
    pub assertion_configuration: Option<Box<crate::models::Samlv2AssertionConfiguration>>,
    #[serde(rename = "buttonImageURL", skip_serializing_if = "Option::is_none")]
    pub button_image_url: Option<String>,
    #[serde(rename = "idpEndpoint", skip_serializing_if = "Option::is_none")]
    pub idp_endpoint: Option<String>,
    #[serde(rename = "idpInitiatedConfiguration", skip_serializing_if = "Option::is_none")]
    pub idp_initiated_configuration: Option<Box<crate::models::Samlv2IdpInitiatedConfiguration>>,
    #[serde(rename = "issuer", skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    #[serde(rename = "loginHintConfiguration", skip_serializing_if = "Option::is_none")]
    pub login_hint_configuration: Option<Box<crate::models::LoginHintConfiguration>>,
    #[serde(rename = "nameIdFormat", skip_serializing_if = "Option::is_none")]
    pub name_id_format: Option<String>,
    #[serde(rename = "postRequest", skip_serializing_if = "Option::is_none")]
    pub post_request: Option<bool>,
    #[serde(rename = "requestSigningKeyId", skip_serializing_if = "Option::is_none")]
    pub request_signing_key_id: Option<uuid::Uuid>,
    #[serde(rename = "signRequest", skip_serializing_if = "Option::is_none")]
    pub sign_request: Option<bool>,
    #[serde(rename = "xmlSignatureC14nMethod", skip_serializing_if = "Option::is_none")]
    pub xml_signature_c14n_method: Option<crate::models::CanonicalizationMethod>,
    #[serde(rename = "emailClaim", skip_serializing_if = "Option::is_none")]
    pub email_claim: Option<String>,
    #[serde(rename = "keyId", skip_serializing_if = "Option::is_none")]
    pub key_id: Option<uuid::Uuid>,
    #[serde(rename = "uniqueIdClaim", skip_serializing_if = "Option::is_none")]
    pub unique_id_claim: Option<String>,
    #[serde(rename = "useNameIdForEmail", skip_serializing_if = "Option::is_none")]
    pub use_name_id_for_email: Option<bool>,
    #[serde(rename = "usernameClaim", skip_serializing_if = "Option::is_none")]
    pub username_claim: Option<String>,
    #[serde(rename = "appId", skip_serializing_if = "Option::is_none")]
    pub app_id: Option<String>,
    #[serde(rename = "fields", skip_serializing_if = "Option::is_none")]
    pub fields: Option<String>,
    #[serde(rename = "loginMethod", skip_serializing_if = "Option::is_none")]
    pub login_method: Option<crate::models::IdentityProviderLoginMethod>,
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<String>,
    #[serde(rename = "bundleId", skip_serializing_if = "Option::is_none")]
    pub bundle_id: Option<String>,
    #[serde(rename = "servicesId", skip_serializing_if = "Option::is_none")]
    pub services_id: Option<String>,
    #[serde(rename = "teamId", skip_serializing_if = "Option::is_none")]
    pub team_id: Option<String>,
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<Box<crate::models::GoogleIdentityProviderProperties>>,
    #[serde(rename = "consumerKey", skip_serializing_if = "Option::is_none")]
    pub consumer_key: Option<String>,
    #[serde(rename = "consumerSecret", skip_serializing_if = "Option::is_none")]
    pub consumer_secret: Option<String>,
    #[serde(rename = "relyingPartyApplicationId", skip_serializing_if = "Option::is_none")]
    pub relying_party_application_id: Option<String>,
    #[serde(rename = "relyingPartyURL", skip_serializing_if = "Option::is_none")]
    pub relying_party_url: Option<String>,
}

impl IdentityProviderField {
    pub fn new() -> IdentityProviderField {
        IdentityProviderField {
            api_mode: None,
            button_text: None,
            client_id: None,
            scope: None,
            web_api_key: None,
            data: None,
            application_configuration: None,
            debug: None,
            id: None,
            insert_instant: None,
            lambda_configuration: None,
            last_update_instant: None,
            linking_strategy: None,
            name: None,
            tenant_configuration: None,
            r#type: None,
            client_secret: None,
            claim_map: None,
            domains: None,
            default_key_id: None,
            header_key_parameter: None,
            oauth2: None,
            unique_identity_claim: None,
            assertion_configuration: None,
            button_image_url: None,
            idp_endpoint: None,
            idp_initiated_configuration: None,
            issuer: None,
            login_hint_configuration: None,
            name_id_format: None,
            post_request: None,
            request_signing_key_id: None,
            sign_request: None,
            xml_signature_c14n_method: None,
            email_claim: None,
            key_id: None,
            unique_id_claim: None,
            use_name_id_for_email: None,
            username_claim: None,
            app_id: None,
            fields: None,
            login_method: None,
            permissions: None,
            bundle_id: None,
            services_id: None,
            team_id: None,
            properties: None,
            consumer_key: None,
            consumer_secret: None,
            relying_party_application_id: None,
            relying_party_url: None,
        }
    }
}


