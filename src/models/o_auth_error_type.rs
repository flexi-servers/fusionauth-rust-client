/*
 * FusionAuth API
 *
 * This is a FusionAuth server. Find out more at [https://fusionauth.io](https://fusionauth.io). You need to [set up an API key](https://fusionauth.io/docs/v1/tech/apis/authentication#managing-api-keys) in the FusionAuth instance you are using to test out the API calls.
 *
 * The version of the OpenAPI document: 1.49.0
 * 
 * Generated by: https://openapi-generator.tech
 */


/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OAuthErrorType {
    #[serde(rename = "invalid_request")]
    InvalidRequest,
    #[serde(rename = "invalid_client")]
    InvalidClient,
    #[serde(rename = "invalid_grant")]
    InvalidGrant,
    #[serde(rename = "invalid_token")]
    InvalidToken,
    #[serde(rename = "unauthorized_client")]
    UnauthorizedClient,
    #[serde(rename = "invalid_scope")]
    InvalidScope,
    #[serde(rename = "server_error")]
    ServerError,
    #[serde(rename = "unsupported_grant_type")]
    UnsupportedGrantType,
    #[serde(rename = "unsupported_response_type")]
    UnsupportedResponseType,
    #[serde(rename = "change_password_required")]
    ChangePasswordRequired,
    #[serde(rename = "not_licensed")]
    NotLicensed,
    #[serde(rename = "two_factor_required")]
    TwoFactorRequired,
    #[serde(rename = "authorization_pending")]
    AuthorizationPending,
    #[serde(rename = "expired_token")]
    ExpiredToken,
    #[serde(rename = "unsupported_token_type")]
    UnsupportedTokenType,

}

impl ToString for OAuthErrorType {
    fn to_string(&self) -> String {
        match self {
            Self::InvalidRequest => String::from("invalid_request"),
            Self::InvalidClient => String::from("invalid_client"),
            Self::InvalidGrant => String::from("invalid_grant"),
            Self::InvalidToken => String::from("invalid_token"),
            Self::UnauthorizedClient => String::from("unauthorized_client"),
            Self::InvalidScope => String::from("invalid_scope"),
            Self::ServerError => String::from("server_error"),
            Self::UnsupportedGrantType => String::from("unsupported_grant_type"),
            Self::UnsupportedResponseType => String::from("unsupported_response_type"),
            Self::ChangePasswordRequired => String::from("change_password_required"),
            Self::NotLicensed => String::from("not_licensed"),
            Self::TwoFactorRequired => String::from("two_factor_required"),
            Self::AuthorizationPending => String::from("authorization_pending"),
            Self::ExpiredToken => String::from("expired_token"),
            Self::UnsupportedTokenType => String::from("unsupported_token_type"),
        }
    }
}

impl Default for OAuthErrorType {
    fn default() -> OAuthErrorType {
        Self::InvalidRequest
    }
}




