/*
 * FusionAuth API
 *
 * This is a FusionAuth server. Find out more at [https://fusionauth.io](https://fusionauth.io). You need to [set up an API key](https://fusionauth.io/docs/v1/tech/apis/authentication#managing-api-keys) in the FusionAuth instance you are using to test out the API calls.
 *
 * The version of the OpenAPI document: 1.57.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// JwtConfiguration : JWT Configuration. A JWT Configuration for an Application may not be active if it is using the global configuration, the configuration  may be <code>enabled = false<code>.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct JwtConfiguration {
    #[serde(rename = "accessTokenKeyId", skip_serializing_if = "Option::is_none")]
    pub access_token_key_id: Option<uuid::Uuid>,
    #[serde(rename = "idTokenKeyId", skip_serializing_if = "Option::is_none")]
    pub id_token_key_id: Option<uuid::Uuid>,
    #[serde(rename = "refreshTokenExpirationPolicy", skip_serializing_if = "Option::is_none")]
    pub refresh_token_expiration_policy: Option<models::RefreshTokenExpirationPolicy>,
    #[serde(rename = "refreshTokenOneTimeUseConfiguration", skip_serializing_if = "Option::is_none")]
    pub refresh_token_one_time_use_configuration: Option<Box<models::RefreshTokenOneTimeUseConfiguration>>,
    #[serde(rename = "refreshTokenRevocationPolicy", skip_serializing_if = "Option::is_none")]
    pub refresh_token_revocation_policy: Option<Box<models::RefreshTokenRevocationPolicy>>,
    #[serde(rename = "refreshTokenSlidingWindowConfiguration", skip_serializing_if = "Option::is_none")]
    pub refresh_token_sliding_window_configuration: Option<Box<models::RefreshTokenSlidingWindowConfiguration>>,
    #[serde(rename = "refreshTokenTimeToLiveInMinutes", skip_serializing_if = "Option::is_none")]
    pub refresh_token_time_to_live_in_minutes: Option<i32>,
    #[serde(rename = "refreshTokenUsagePolicy", skip_serializing_if = "Option::is_none")]
    pub refresh_token_usage_policy: Option<models::RefreshTokenUsagePolicy>,
    #[serde(rename = "timeToLiveInSeconds", skip_serializing_if = "Option::is_none")]
    pub time_to_live_in_seconds: Option<i32>,
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

impl JwtConfiguration {
    /// JWT Configuration. A JWT Configuration for an Application may not be active if it is using the global configuration, the configuration  may be <code>enabled = false<code>.
    pub fn new() -> JwtConfiguration {
        JwtConfiguration {
            access_token_key_id: None,
            id_token_key_id: None,
            refresh_token_expiration_policy: None,
            refresh_token_one_time_use_configuration: None,
            refresh_token_revocation_policy: None,
            refresh_token_sliding_window_configuration: None,
            refresh_token_time_to_live_in_minutes: None,
            refresh_token_usage_policy: None,
            time_to_live_in_seconds: None,
            enabled: None,
        }
    }
}

