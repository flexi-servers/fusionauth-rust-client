/*
 * FusionAuth API
 *
 * This is a FusionAuth server. Find out more at [https://fusionauth.io](https://fusionauth.io). You need to [set up an API key](https://fusionauth.io/docs/v1/tech/apis/authentication#managing-api-keys) in the FusionAuth instance you are using to test out the API calls.
 *
 * The version of the OpenAPI document: 1.60.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// VerifyStartRequest : 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VerifyStartRequest {
    #[serde(rename = "applicationId", skip_serializing_if = "Option::is_none")]
    pub application_id: Option<uuid::Uuid>,
    #[serde(rename = "loginId", skip_serializing_if = "Option::is_none")]
    pub login_id: Option<String>,
    #[serde(rename = "loginIdType", skip_serializing_if = "Option::is_none")]
    pub login_id_type: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "verificationStrategy", skip_serializing_if = "Option::is_none")]
    pub verification_strategy: Option<models::VerificationStrategy>,
}

impl VerifyStartRequest {
    /// 
    pub fn new() -> VerifyStartRequest {
        VerifyStartRequest {
            application_id: None,
            login_id: None,
            login_id_type: None,
            state: None,
            verification_strategy: None,
        }
    }
}

