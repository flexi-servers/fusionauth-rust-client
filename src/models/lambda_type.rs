/*
 * FusionAuth API
 *
 * This is a FusionAuth server. Find out more at [https://fusionauth.io](https://fusionauth.io). You need to [set up an API key](https://fusionauth.io/docs/v1/tech/apis/authentication#managing-api-keys) in the FusionAuth instance you are using to test out the API calls.
 *
 * The version of the OpenAPI document: 1.50.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// LambdaType : The types of lambdas that indicate how they are invoked by FusionAuth.
/// The types of lambdas that indicate how they are invoked by FusionAuth.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LambdaType {
    #[serde(rename = "JWTPopulate")]
    JwtPopulate,
    #[serde(rename = "OpenIDReconcile")]
    OpenIdReconcile,
    #[serde(rename = "SAMLv2Reconcile")]
    Samlv2Reconcile,
    #[serde(rename = "SAMLv2Populate")]
    Samlv2Populate,
    #[serde(rename = "AppleReconcile")]
    AppleReconcile,
    #[serde(rename = "ExternalJWTReconcile")]
    ExternalJwtReconcile,
    #[serde(rename = "FacebookReconcile")]
    FacebookReconcile,
    #[serde(rename = "GoogleReconcile")]
    GoogleReconcile,
    #[serde(rename = "HYPRReconcile")]
    HyprReconcile,
    #[serde(rename = "TwitterReconcile")]
    TwitterReconcile,
    #[serde(rename = "LDAPConnectorReconcile")]
    LdapConnectorReconcile,
    #[serde(rename = "LinkedInReconcile")]
    LinkedInReconcile,
    #[serde(rename = "EpicGamesReconcile")]
    EpicGamesReconcile,
    #[serde(rename = "NintendoReconcile")]
    NintendoReconcile,
    #[serde(rename = "SonyPSNReconcile")]
    SonyPsnReconcile,
    #[serde(rename = "SteamReconcile")]
    SteamReconcile,
    #[serde(rename = "TwitchReconcile")]
    TwitchReconcile,
    #[serde(rename = "XboxReconcile")]
    XboxReconcile,
    #[serde(rename = "ClientCredentialsJWTPopulate")]
    ClientCredentialsJwtPopulate,
    #[serde(rename = "SCIMServerGroupRequestConverter")]
    ScimServerGroupRequestConverter,
    #[serde(rename = "SCIMServerGroupResponseConverter")]
    ScimServerGroupResponseConverter,
    #[serde(rename = "SCIMServerUserRequestConverter")]
    ScimServerUserRequestConverter,
    #[serde(rename = "SCIMServerUserResponseConverter")]
    ScimServerUserResponseConverter,
    #[serde(rename = "SelfServiceRegistrationValidation")]
    SelfServiceRegistrationValidation,
    #[serde(rename = "UserInfoPopulate")]
    UserInfoPopulate,

}

impl ToString for LambdaType {
    fn to_string(&self) -> String {
        match self {
            Self::JwtPopulate => String::from("JWTPopulate"),
            Self::OpenIdReconcile => String::from("OpenIDReconcile"),
            Self::Samlv2Reconcile => String::from("SAMLv2Reconcile"),
            Self::Samlv2Populate => String::from("SAMLv2Populate"),
            Self::AppleReconcile => String::from("AppleReconcile"),
            Self::ExternalJwtReconcile => String::from("ExternalJWTReconcile"),
            Self::FacebookReconcile => String::from("FacebookReconcile"),
            Self::GoogleReconcile => String::from("GoogleReconcile"),
            Self::HyprReconcile => String::from("HYPRReconcile"),
            Self::TwitterReconcile => String::from("TwitterReconcile"),
            Self::LdapConnectorReconcile => String::from("LDAPConnectorReconcile"),
            Self::LinkedInReconcile => String::from("LinkedInReconcile"),
            Self::EpicGamesReconcile => String::from("EpicGamesReconcile"),
            Self::NintendoReconcile => String::from("NintendoReconcile"),
            Self::SonyPsnReconcile => String::from("SonyPSNReconcile"),
            Self::SteamReconcile => String::from("SteamReconcile"),
            Self::TwitchReconcile => String::from("TwitchReconcile"),
            Self::XboxReconcile => String::from("XboxReconcile"),
            Self::ClientCredentialsJwtPopulate => String::from("ClientCredentialsJWTPopulate"),
            Self::ScimServerGroupRequestConverter => String::from("SCIMServerGroupRequestConverter"),
            Self::ScimServerGroupResponseConverter => String::from("SCIMServerGroupResponseConverter"),
            Self::ScimServerUserRequestConverter => String::from("SCIMServerUserRequestConverter"),
            Self::ScimServerUserResponseConverter => String::from("SCIMServerUserResponseConverter"),
            Self::SelfServiceRegistrationValidation => String::from("SelfServiceRegistrationValidation"),
            Self::UserInfoPopulate => String::from("UserInfoPopulate"),
        }
    }
}

impl Default for LambdaType {
    fn default() -> LambdaType {
        Self::JwtPopulate
    }
}

