/*
 * FusionAuth API
 *
 * This is a FusionAuth server. Find out more at [https://fusionauth.io](https://fusionauth.io). You need to [set up an API key](https://fusionauth.io/docs/v1/tech/apis/authentication#managing-api-keys) in the FusionAuth instance you are using to test out the API calls.
 *
 * The version of the OpenAPI document: 1.60.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// UserIdentityUpdateEvent : Models the user identity update event
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserIdentityUpdateEvent {
    #[serde(rename = "loginIdType", skip_serializing_if = "Option::is_none")]
    pub login_id_type: Option<String>,
    #[serde(rename = "newLoginId", skip_serializing_if = "Option::is_none")]
    pub new_login_id: Option<String>,
    #[serde(rename = "previousLoginId", skip_serializing_if = "Option::is_none")]
    pub previous_login_id: Option<String>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<models::User>>,
}

impl UserIdentityUpdateEvent {
    /// Models the user identity update event
    pub fn new() -> UserIdentityUpdateEvent {
        UserIdentityUpdateEvent {
            login_id_type: None,
            new_login_id: None,
            previous_login_id: None,
            user: None,
        }
    }
}

