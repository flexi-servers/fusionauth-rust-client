/*
 * FusionAuth API
 *
 * This is a FusionAuth server. Find out more at [https://fusionauth.io](https://fusionauth.io). You need to [set up an API key](https://fusionauth.io/docs/v1/tech/apis/authentication#managing-api-keys) in the FusionAuth instance you are using to test out the API calls.
 *
 * The version of the OpenAPI document: 1.55.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PublicKeyCredentialRequestOptions : Provides the <i>authenticator<i> with the data it needs to generate an assertion.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PublicKeyCredentialRequestOptions {
    #[serde(rename = "allowCredentials", skip_serializing_if = "Option::is_none")]
    pub allow_credentials: Option<Vec<models::PublicKeyCredentialDescriptor>>,
    #[serde(rename = "challenge", skip_serializing_if = "Option::is_none")]
    pub challenge: Option<String>,
    #[serde(rename = "rpId", skip_serializing_if = "Option::is_none")]
    pub rp_id: Option<String>,
    #[serde(rename = "timeout", skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i64>,
    #[serde(rename = "userVerification", skip_serializing_if = "Option::is_none")]
    pub user_verification: Option<models::UserVerificationRequirement>,
}

impl PublicKeyCredentialRequestOptions {
    /// Provides the <i>authenticator<i> with the data it needs to generate an assertion.
    pub fn new() -> PublicKeyCredentialRequestOptions {
        PublicKeyCredentialRequestOptions {
            allow_credentials: None,
            challenge: None,
            rp_id: None,
            timeout: None,
            user_verification: None,
        }
    }
}

