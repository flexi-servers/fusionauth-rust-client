/*
 * FusionAuth API
 *
 * This is a FusionAuth server. Find out more at [https://fusionauth.io](https://fusionauth.io). You need to [set up an API key](https://fusionauth.io/docs/v1/tech/apis/authentication#managing-api-keys) in the FusionAuth instance you are using to test out the API calls.
 *
 * The version of the OpenAPI document: 1.60.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IdentityVerifiedReason : Models the reason that {@link UserIdentity#verified} was set to true or false.
/// Models the reason that {@link UserIdentity#verified} was set to true or false.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IdentityVerifiedReason {
    #[serde(rename = "Skipped")]
    Skipped,
    #[serde(rename = "Trusted")]
    Trusted,
    #[serde(rename = "Unverifiable")]
    Unverifiable,
    #[serde(rename = "Implicit")]
    Implicit,
    #[serde(rename = "Pending")]
    Pending,
    #[serde(rename = "Completed")]
    Completed,
    #[serde(rename = "Disabled")]
    Disabled,
    #[serde(rename = "Administrative")]
    Administrative,
    #[serde(rename = "Import")]
    Import,

}

impl std::fmt::Display for IdentityVerifiedReason {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Skipped => write!(f, "Skipped"),
            Self::Trusted => write!(f, "Trusted"),
            Self::Unverifiable => write!(f, "Unverifiable"),
            Self::Implicit => write!(f, "Implicit"),
            Self::Pending => write!(f, "Pending"),
            Self::Completed => write!(f, "Completed"),
            Self::Disabled => write!(f, "Disabled"),
            Self::Administrative => write!(f, "Administrative"),
            Self::Import => write!(f, "Import"),
        }
    }
}

impl Default for IdentityVerifiedReason {
    fn default() -> IdentityVerifiedReason {
        Self::Skipped
    }
}

