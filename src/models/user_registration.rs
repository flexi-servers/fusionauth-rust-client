/*
 * FusionAuth API
 *
 * This is a FusionAuth server. Find out more at [https://fusionauth.io](https://fusionauth.io). You need to [set up an API key](https://fusionauth.io/docs/v1/tech/apis/authentication#managing-api-keys) in the FusionAuth instance you are using to test out the API calls.
 *
 * The version of the OpenAPI document: 1.55.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// UserRegistration : User registration information for a single application.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserRegistration {
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "preferredLanguages", skip_serializing_if = "Option::is_none")]
    pub preferred_languages: Option<Vec<String>>,
    #[serde(rename = "tokens", skip_serializing_if = "Option::is_none")]
    pub tokens: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "applicationId", skip_serializing_if = "Option::is_none")]
    pub application_id: Option<uuid::Uuid>,
    #[serde(rename = "authenticationToken", skip_serializing_if = "Option::is_none")]
    pub authentication_token: Option<String>,
    #[serde(rename = "cleanSpeakId", skip_serializing_if = "Option::is_none")]
    pub clean_speak_id: Option<uuid::Uuid>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
    #[serde(rename = "insertInstant", skip_serializing_if = "Option::is_none")]
    pub insert_instant: Option<i64>,
    /// The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
    #[serde(rename = "lastLoginInstant", skip_serializing_if = "Option::is_none")]
    pub last_login_instant: Option<i64>,
    /// The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
    #[serde(rename = "lastUpdateInstant", skip_serializing_if = "Option::is_none")]
    pub last_update_instant: Option<i64>,
    #[serde(rename = "roles", skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<serde_json::Value>>,
    /// Timezone Identifier
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    #[serde(rename = "usernameStatus", skip_serializing_if = "Option::is_none")]
    pub username_status: Option<models::ContentStatus>,
    #[serde(rename = "verified", skip_serializing_if = "Option::is_none")]
    pub verified: Option<bool>,
    /// The number of milliseconds since the unix epoch: January 1, 1970 00:00:00 UTC. This value is always in UTC.
    #[serde(rename = "verifiedInstant", skip_serializing_if = "Option::is_none")]
    pub verified_instant: Option<i64>,
}

impl UserRegistration {
    /// User registration information for a single application.
    pub fn new() -> UserRegistration {
        UserRegistration {
            data: None,
            preferred_languages: None,
            tokens: None,
            application_id: None,
            authentication_token: None,
            clean_speak_id: None,
            id: None,
            insert_instant: None,
            last_login_instant: None,
            last_update_instant: None,
            roles: None,
            timezone: None,
            username: None,
            username_status: None,
            verified: None,
            verified_instant: None,
        }
    }
}

